
package com.example.demo.User;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@Entity
@Table(name="users")
public class User {
	
	public User(Long id, String email, String password, String firstName, String lastName, String gender,
			AuthenticationProvider authProvider, UserRole userRole, String dateOfBirth, Boolean locked,
			Boolean enabled) {
		super();
		this.id = id;
		this.email = email;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.gender = gender;
		this.authProvider = authProvider;
		this.userRole = userRole;
		this.dateOfBirth = dateOfBirth;
		this.locked = locked;
		this.enabled = enabled;
	}
	
	public User() {
		super();
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(nullable = false, unique = true, length = 45)
	private Long id;
	
	@Column(nullable = false, unique = true, length = 45)
    private String email;
     
    @Column(nullable = false, length = 64)
    private String password;
     
    @Column(name = "first_name", nullable = false, length = 20)
    private String firstName;
     
    @Column(name = "last_name", nullable = false, length = 20)
    private String lastName;
    
    @Column(name = "gender", nullable = true, length = 10)
    private String gender;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "auth_provider", columnDefinition = "varchar(10) default GMAIL")
    private AuthenticationProvider authProvider;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "user_role", columnDefinition = "varchar(10) default USER")
    private UserRole userRole;
    
	@Column(name = "date_of_birth")
    private String dateOfBirth;
    
    @Column(columnDefinition = "boolean default false")
    private Boolean locked;
    
    @Column(columnDefinition = "boolean default false")
    private Boolean enabled;
    
    public UserRole getUserRole() {
		return userRole;
	}

	public void setUserRole(UserRole userRole) {
		this.userRole = userRole;
	}

	public Boolean getLocked() {
		return locked;
	}

	public void setLocked(Boolean locked) {
		this.locked = locked;
	}

	public Boolean getEnabled() {
		return enabled;
	}

	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}
    
    public AuthenticationProvider getAuthProvider() {
		return authProvider;
	}
    
	public void setAuthProvider(AuthenticationProvider authProvider) {
		this.authProvider = authProvider;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getDateOfBirth() {
		return dateOfBirth;
	}

	public void setDateOfBirth(String dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

}
//package com.example.demo.User;
//
//import java.util.Collection;
//import java.util.Collections;
//
//import javax.persistence.Entity;
//import javax.persistence.GeneratedValue;
//import javax.persistence.GenerationType;
//import javax.persistence.Id;
//
//import org.springframework.security.core.GrantedAuthority;
//import org.springframework.security.core.authority.SimpleGrantedAuthority;
//import org.springframework.security.core.userdetails.UserDetails;
//
//import lombok.AllArgsConstructor;
//import lombok.Builder;
//import lombok.EqualsAndHashCode;
//import lombok.Getter;
//import lombok.NoArgsConstructor;
//import lombok.Setter;
//
//@Getter
//@Setter
//@Builder
//@EqualsAndHashCode
//@NoArgsConstructor
//@AllArgsConstructor
//@Entity(name = "Users")
//public class User implements UserDetails {
//
//    @Id
//    @GeneratedValue(strategy = GenerationType.IDENTITY)
//    private Long id;
//
//    private String name;
//
//    private String surname;
//
//    private String email;
//
//    private String password;
//
//    @Builder.Default
//    private UserRole userRole = UserRole.USER;
//
//    @Builder.Default
//    private Boolean locked = false;
//
//    @Builder.Default
//    private Boolean enabled = false;
//
//    @Override
//    public Collection<? extends GrantedAuthority> getAuthorities() {
//
//        final SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(userRole.name());
//        return Collections.singletonList(simpleGrantedAuthority);
//    }
//
//    @Override
//    public String getPassword() {
//        return password;
//    }
//
//    @Override
//    public String getUsername() {
//        return email;
//    }
//
//    @Override
//    public boolean isAccountNonExpired() {
//        return true;
//    }
//
//    @Override
//    public boolean isAccountNonLocked() {
//        return !locked;
//    }
//
//    @Override
//    public boolean isCredentialsNonExpired() {
//        return true;
//    }
//
//    @Override
//    public boolean isEnabled() {
//        return enabled;
//    }
//}
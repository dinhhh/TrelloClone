package com.example.demo.User;

import java.text.MessageFormat;
import java.util.Optional;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.example.demo.ConfirmationToken.ConfirmationToken;
import com.example.demo.ConfirmationToken.ConfirmationTokenService;

public class UserService implements UserDetailsService {
	
	private UserRepository userRepo;

	private final BCryptPasswordEncoder bCryptPasswordEncoder;

	private final ConfirmationTokenService confirmationTokenService;

	private final EmailSenderService emailSenderService;
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		// TODO Auto-generated method stub
		final Optional<User> optionalUser = userRepo.findByEmail(username);
		if (optionalUser.isPresent()) {
            return (UserDetails) optionalUser.get();
        }
        else {
            throw new UsernameNotFoundException(MessageFormat.format("User with email {0} cannot be found.", username));
        }	
	}
	
	public void signUpUser(User user) {

	    final String encryptedPassword = bCryptPasswordEncoder.encode(user.getPassword());

	    user.setPassword(encryptedPassword);

	    final User createdUser = userRepo.save(user);

	    final ConfirmationToken confirmationToken = new ConfirmationToken(user);

	    confirmationTokenService.saveConfirmationToken(confirmationToken);

	}
}
